using NUnit.Framework;

namespace day_2020_12_20.tests
{
    public class SolverTests
    {
        [TestCase(@"
Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...", 20899048083289)]
        public void Part1(string data, long result)
        {
            Assert.That(Solver.Part1(Parser.ParseTiles(data)), Is.EqualTo(result));
        }

        [TestCase(0, 0, +1,  0, 0b0011010010)]
        [TestCase(9, 0, -1,  0, 0b0100101100)]
        [TestCase(0, 0,  0, +1, 0b0111110010)]
        [TestCase(0, 9,  0, -1, 0b0100111110)]
        [TestCase(0, 9, +1,  0, 0b0011100111)]
        [TestCase(9, 9, -1,  0, 0b1110011100)]
        [TestCase(9, 0,  0, +1, 0b0001011001)]
        [TestCase(9, 9,  0, -1, 0b1001101000)]
        public void GetHash_Works_Correctly(int x, int y, int dx, int dy, int result)
        {
            const string data = @"
Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###";
            Assert.That(Solver.GetHash(Parser.ParseTile(data), x, y, dx, dy), Is.EqualTo(result));
        }
    }
}